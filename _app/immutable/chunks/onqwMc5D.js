var f=Object.defineProperty;var g=(n,e,r)=>e in n?f(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r;var c=(n,e,r)=>g(n,typeof e!="symbol"?e+"":e,r);import{s as I}from"./BZtaPGCW.js";import{i as m,d as t,r as i,p as P,s as p,g as b,u as d,o as k,a as w,b as R,c as v}from"./B7T05OMM.js";const D=()=>{const n=I;return{page:{subscribe:n.page.subscribe},navigating:{subscribe:n.navigating.subscribe},updated:n.updated}},E={subscribe(n){return D().page.subscribe(n)}};class S{constructor(){c(this,"currentRoom",null);c(this,"playerId","");c(this,"playerName","");c(this,"roomUnsubscribe",null);c(this,"onPlayerJoinCallback");c(this,"onPlayerLeaveCallback");c(this,"onRoomErrorCallback");c(this,"lastPlayerIds",new Set);if(typeof localStorage<"u"){const e=localStorage.getItem("playerId");if(e)this.playerId=e;else{this.playerId=Math.random().toString(36).substring(2,15);try{localStorage.setItem("playerId",this.playerId)}catch{}}}else this.playerId=Math.random().toString(36).substring(2,15);console.log("RoomManager initialized with player ID:",this.playerId)}setPlayerName(e){this.playerName=e}async createRoom(e){if(!m()||!t)throw new Error("Firebase is not available");try{this.playerName=e;const r={hostId:this.playerId,hostName:e,players:{[this.playerId]:{id:this.playerId,name:e,status:"not-ready",isHost:!0,joinedAt:Date.now()}},status:"waiting",maxPlayers:4,createdAt:Date.now(),updatedAt:Date.now()},o=i(t,"rooms"),s=P(o);if(!s.key)throw new Error("Failed to generate room ID");const a={id:s.key,...r};return await p(s,a),this.currentRoom=a,console.log("Room created successfully with ID:",s.key),s.key}catch(r){throw console.error("Failed to create room:",r),r instanceof Error?r.message.includes("permission")?new Error("Firebase permission denied. Please check database rules."):r.message.includes("network")?new Error("Network error. Please check your internet connection."):new Error(`Room creation failed: ${r.message}`):new Error("Unknown error occurred while creating room")}}async joinRoom(e,r){if(!m()||!t)throw new Error("Firebase is not available");try{this.playerName=r;const o=i(t,`rooms/${e}`),s=await b(o);if(!s.exists())throw new Error("Room not found");const a=s.val();if(a.status!=="waiting")throw new Error("Room is not accepting new players");if(Object.keys(a.players).length>=a.maxPlayers)throw new Error("Room is full");const h={id:this.playerId,name:r,status:"not-ready",isHost:!1,joinedAt:Date.now()},u=i(t,`rooms/${e}/players/${this.playerId}`);await p(u,h),await d(o,{updatedAt:Date.now()}),this.currentRoom={...a,players:{...a.players,[this.playerId]:h},updatedAt:Date.now()};try{k(u).remove()}catch{}console.log("Successfully joined room:",e)}catch(o){throw console.error("Failed to join room:",o),o}}getCurrentRoom(){return this.currentRoom}async fetchRoom(e){if(!m()||!t)return null;try{const r=i(t,`rooms/${e}`),o=await b(r);return o.exists()?o.val():null}catch(r){return console.error("fetchRoom error",r),null}}getPlayerId(){return this.playerId}getPlayerName(){return this.playerName}isHost(){var e;return((e=this.currentRoom)==null?void 0:e.hostId)===this.playerId}async leaveRoom(){if(!(!this.currentRoom||!m()||!t))try{this.roomUnsubscribe&&(this.roomUnsubscribe(),this.roomUnsubscribe=null);const e=this.currentRoom.id,r=i(t,`rooms/${e}`);if(this.currentRoom.hostId===this.playerId)await w(r);else{const o=i(t,`rooms/${e}/players/${this.playerId}`);await w(o),await d(r,{updatedAt:Date.now()})}this.currentRoom=null,this.lastPlayerIds.clear()}catch(e){throw console.error("Failed to leave room:",e),e}}onRoomUpdate(e){if(!this.currentRoom||!m()||!t)return;const r=i(t,`rooms/${this.currentRoom.id}`);this.roomUnsubscribe&&(this.roomUnsubscribe(),this.roomUnsubscribe=null);const o=R(r,s=>{if(!s.exists()){this.currentRoom=null,e(null);return}const a=s.val(),l=new Set(this.lastPlayerIds),h=new Set(Object.keys(a.players||{}));for(const u of h)if(!l.has(u)&&this.onPlayerJoinCallback){const y=a.players[u];y&&this.onPlayerJoinCallback(y)}for(const u of l)!h.has(u)&&this.onPlayerLeaveCallback&&this.onPlayerLeaveCallback(u);this.lastPlayerIds=h,this.currentRoom=a,e(a)},s=>{console.error("Room listener error:",s),this.onRoomErrorCallback&&this.onRoomErrorCallback(s)});this.roomUnsubscribe=o}onPlayerJoin(e){this.onPlayerJoinCallback=e}onPlayerLeave(e){this.onPlayerLeaveCallback=e}onRoomError(e){this.onRoomErrorCallback=e}async startGame(){if(!this.currentRoom||!m()||!t)return;const e=i(t,`rooms/${this.currentRoom.id}`);await d(e,{status:"racing",updatedAt:Date.now(),raceStartAt:v()}),this.currentRoom={...this.currentRoom,status:"racing",updatedAt:Date.now()}}async setHostPeerId(e){if(!this.currentRoom||!m()||!t)return;const r=i(t,`rooms/${this.currentRoom.id}`);await d(r,{hostPeerId:e,updatedAt:Date.now()}),this.currentRoom={...this.currentRoom,hostPeerId:e,updatedAt:Date.now()}}subscribeToRoom(e,r,o){if(!m()||!t)return()=>{};const s=i(t,`rooms/${e}`);return R(s,l=>{if(!l.exists()){r(null);return}r(l.val())},l=>{console.error("subscribeToRoom error:",l),o==null||o(l)})}}export{S as R,E as p};
