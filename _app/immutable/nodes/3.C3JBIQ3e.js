var xt=Object.defineProperty;var Tt=(f,e,s)=>e in f?xt(f,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):f[e]=s;var r=(f,e,s)=>Tt(f,typeof e!="symbol"?e+"":e,s);import"../chunks/Bzak7iHL.js";import"../chunks/DLP-JChq.js";import{o as Ct,a as At}from"../chunks/D7t-Q6zm.js";import{a2 as _t,C as Lt,p as Dt,f as pt,c as Pt,t as ct,i as Et,j as ht,k as It,g as m,m as k,d as v,s as g,o as y,w}from"../chunks/DmiIK6kV.js";import{g as Q,s as T}from"../chunks/B6u73DSu.js";import{i as zt}from"../chunks/p4z5VYU4.js";import{s as Gt,a as dt}from"../chunks/DNZA2biE.js";import{b as Rt}from"../chunks/CzH18Rhg.js";import{s as $t}from"../chunks/Bd-89TeU.js";import{i as Ht}from"../chunks/CkuCw-0Z.js";import{n as Ft,j as Vt,V as C,o as K,p as B,q as N,r as lt,s as q,G as Y,S as Wt,P as Ot,W as Xt,C as jt,a as Ut,I as Zt,R as Kt,b as Nt,c as qt,E as Yt,T as Jt,e as Qt,d as te,A as ee,M as J,m as se}from"../chunks/B6851Meq.js";import{s as _}from"../chunks/DK_VGh2L.js";import{b as ie}from"../chunks/B8plIoDJ.js";function re(f,e,s){var t=_t(f,e);t&&t.set&&(f[e]=s,Lt(()=>{f[e]=null}))}class R{static disposeMaterial(e){if(!e)return;const s=t=>{var i,a;t.map&&((a=(i=t.map).dispose)==null||a.call(i)),t.dispose()};Array.isArray(e)?e.forEach(s):s(e)}static disposeObject(e){e.traverse(s=>{var t,i,a,h;s.geometry&&((i=(t=s.geometry).dispose)==null||i.call(t)),s.material&&R.disposeMaterial(s.material),s instanceof Ft&&((a=s.dispose)==null||a.call(s)),s instanceof Vt&&((h=s.userData)!=null&&h.dispose)&&s.userData.dispose()})}static disposeScene(e){e.traverse(s=>{var t,i;s.geometry&&((i=(t=s.geometry).dispose)==null||i.call(t)),s.material&&R.disposeMaterial(s.material)})}}class ae{constructor(e){r(this,"checkpoints",[]);r(this,"currentIndex",0);r(this,"lapStart",performance.now());r(this,"currentLapMs",0);r(this,"bestLapMs",null);this.checkpoints=e}update(e,s){this.currentLapMs=e-this.lapStart;const t=this.checkpoints[this.currentIndex];if(t&&s.distanceTo(t.position)<=t.radius&&(this.currentIndex++,this.currentIndex>=this.checkpoints.length)){const i=this.currentLapMs;(this.bestLapMs===null||i<this.bestLapMs)&&(this.bestLapMs=i),this.lapStart=e,this.currentLapMs=0,this.currentIndex=0}}getHudTimes(){return{current:this.currentLapMs,best:this.bestLapMs}}}class oe{constructor(){r(this,"score",0);r(this,"distance",0);r(this,"combo",0);r(this,"lastScoreTime",0);r(this,"comboDecayTime",3e3);r(this,"lastPosition",new C);r(this,"startTime",0);this.startTime=performance.now(),this.lastScoreTime=this.startTime}update(e,s,t){const i=performance.now(),a=s.distanceTo(this.lastPosition);if(this.distance+=a,this.lastPosition.copy(s),a>0){const h=Math.floor(a*10);this.addScore(h,"distance")}if(t>20){const h=Math.floor((t-20)*2);this.addScore(h,"speed")}i-this.lastScoreTime>this.comboDecayTime&&(this.combo=0)}addScore(e,s="general"){const t=performance.now();t-this.lastScoreTime<1e3?this.combo=Math.min(this.combo+1,10):this.combo=Math.max(1,this.combo);const i=e*this.combo;return this.score+=i,this.lastScoreTime=t,i}addObstacleAvoidanceBonus(){return this.addScore(50,"avoidance")}addNearMissBonus(){return this.addScore(25,"nearmiss")}subtractCollisionPenalty(){this.score=Math.max(0,this.score-100),this.combo=0}getScoreData(){return{total:this.score,distance:this.distance,combo:this.combo,lastScoreTime:this.lastScoreTime}}reset(){this.score=0,this.distance=0,this.combo=0,this.lastScoreTime=performance.now(),this.lastPosition.set(0,0,0)}}class ne{constructor(e,s){r(this,"scene");r(this,"camera");r(this,"particleGroups",[]);r(this,"screenShakeIntensity",0);r(this,"screenShakeDecay",.95);r(this,"originalCameraPosition",new C);this.scene=e,this.camera=s}update(e){this.updateParticles(e),this.updateScreenShake(e),this.cleanupParticles()}createCollisionEffect(e,s=1){this.createSparks(e,s),this.createDebris(e,s),this.addScreenShake(s*.5)}createBoostEffect(e){const t=new K,i=new Float32Array(60),a=new Float32Array(60),h=new Float32Array(20);for(let o=0;o<20;o++)i[o*3]=e.x+(Math.random()-.5)*2,i[o*3+1]=e.y+Math.random()*.5,i[o*3+2]=e.z-Math.random()*3,a[o*3]=.2+Math.random()*.3,a[o*3+1]=.8+Math.random()*.2,a[o*3+2]=1,h[o]=Math.random()*.1+.05;t.setAttribute("position",new B(i,3)),t.setAttribute("color",new B(a,3)),t.setAttribute("size",new B(h,1));const u=new N({size:.1,vertexColors:!0,blending:lt,transparent:!0,opacity:.8}),l=new q(t,u),p=new Y;p.add(l),p.startTime=performance.now(),p.duration=1e3,p.type="boost",this.scene.add(p),this.particleGroups.push(p)}createSparks(e,s){const t=Math.floor(20*s),i=new K,a=new Float32Array(t*3),h=new Float32Array(t*3),u=new Float32Array(t*3);for(let d=0;d<t;d++)a[d*3]=e.x,a[d*3+1]=e.y,a[d*3+2]=e.z,h[d*3]=(Math.random()-.5)*10,h[d*3+1]=Math.random()*5+2,h[d*3+2]=(Math.random()-.5)*10,u[d*3]=1,u[d*3+1]=.5+Math.random()*.5,u[d*3+2]=0;i.setAttribute("position",new B(a,3)),i.setAttribute("velocity",new B(h,3)),i.setAttribute("color",new B(u,3));const l=new N({size:.05,vertexColors:!0,blending:lt,transparent:!0}),p=new q(i,l),o=new Y;o.add(p),o.startTime=performance.now(),o.duration=1500,o.type="sparks",this.scene.add(o),this.particleGroups.push(o)}createDebris(e,s){const t=Math.floor(15*s),i=new K,a=new Float32Array(t*3),h=new Float32Array(t*3),u=new Float32Array(t*3);for(let d=0;d<t;d++){a[d*3]=e.x+(Math.random()-.5)*.5,a[d*3+1]=e.y+Math.random()*.5,a[d*3+2]=e.z+(Math.random()-.5)*.5,h[d*3]=(Math.random()-.5)*3,h[d*3+1]=Math.random()*2+1,h[d*3+2]=(Math.random()-.5)*3;const b=.3+Math.random()*.4;u[d*3]=b,u[d*3+1]=b*.8,u[d*3+2]=b*.6}i.setAttribute("position",new B(a,3)),i.setAttribute("velocity",new B(h,3)),i.setAttribute("color",new B(u,3));const l=new N({size:.08,vertexColors:!0,transparent:!0,opacity:.7}),p=new q(i,l),o=new Y;o.add(p),o.startTime=performance.now(),o.duration=2e3,o.type="debris",this.scene.add(o),this.particleGroups.push(o)}updateParticles(e){const s=performance.now();this.particleGroups.forEach(t=>{var b;const i=s-t.startTime,a=t.duration,h=i/a;if(h>=1)return;const u=t.children[0],l=u.geometry,p=l.attributes.position.array,o=(b=l.attributes.velocity)==null?void 0:b.array;if(o){for(let S=0;S<p.length;S+=3)p[S]+=o[S]*e,p[S+1]+=o[S+1]*e,p[S+2]+=o[S+2]*e,o[S+1]-=9.8*e;l.attributes.position.needsUpdate=!0}const d=u.material;d.opacity=1-h})}addScreenShake(e){this.screenShakeIntensity=Math.max(this.screenShakeIntensity,e)}updateScreenShake(e){if(this.screenShakeIntensity>0){const s=(Math.random()-.5)*this.screenShakeIntensity,t=(Math.random()-.5)*this.screenShakeIntensity,i=(Math.random()-.5)*this.screenShakeIntensity;this.originalCameraPosition.length()===0&&this.originalCameraPosition.copy(this.camera.position),this.camera.position.add(new C(s,t,i)),this.screenShakeIntensity*=this.screenShakeDecay,this.screenShakeIntensity<.001&&(this.screenShakeIntensity=0)}}cleanupParticles(){const e=performance.now();this.particleGroups=this.particleGroups.filter(s=>{const t=e-s.startTime,i=s.duration;return t>=i?(this.scene.remove(s),!1):!0})}dispose(){this.particleGroups.forEach(e=>{this.scene.remove(e)}),this.particleGroups=[]}}class ce{constructor(e){r(this,"scene");r(this,"camera");r(this,"renderer");r(this,"clock");r(this,"physics");r(this,"input");r(this,"renderSystem");r(this,"chaseCamera");r(this,"running",!1);r(this,"disposeBag",[]);r(this,"car");r(this,"track");r(this,"collision");r(this,"lap");r(this,"score");r(this,"effects");r(this,"audio");r(this,"unsubSettings");r(this,"throttleInput",0);r(this,"steerSensitivity",1);r(this,"environment");r(this,"frameTimeBuffer",[]);r(this,"frameTimeBufferSize",5);r(this,"currentSpeed",0);r(this,"loop",()=>{if(!this.running)return;const e=this.clock.getDelta(),s=Math.min(e,.1);this.frameTimeBuffer.push(s),this.frameTimeBuffer.length>this.frameTimeBufferSize&&this.frameTimeBuffer.shift();const t=this.frameTimeBuffer.reduce((i,a)=>i+a,0)/this.frameTimeBuffer.length;this.update(t),this.render(),requestAnimationFrame(this.loop)});r(this,"updateSize",()=>{var t,i;const e=window.innerWidth,s=window.innerHeight;this.camera.aspect=e/s,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,s,!1),this.renderer.setPixelRatio(Math.min(devicePixelRatio,2)),(i=(t=this.renderSystem).updateSize)==null||i.call(t,e,s)});this.container=e,this.scene=new Wt,this.camera=new Ot(60,1,.1,1e3),this.camera.position.set(0,5,10),this.camera.lookAt(0,0,0),this.renderer=new Xt({antialias:!0,alpha:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.clock=new jt,this.physics=new Ut,this.input=new Zt(e),this.renderSystem=new Kt(this.scene,this.camera,this.renderer),this.chaseCamera=new Nt(this.camera)}init(){const e=Q(_);this.renderer.setPixelRatio(Math.min(devicePixelRatio,e.graphics.resolution)),this.renderer.shadowMap.enabled=!!e.graphics.shadows,this.renderer.shadowMap.type=qt,this.updateSize(),this.container.appendChild(this.renderer.domElement),window.addEventListener("resize",this.updateSize),this.disposeBag.push(()=>window.removeEventListener("resize",this.updateSize)),this.environment=new Yt(this.renderer),this.environment.setup(this.scene),this.scene.add(this.environment.group),this.track=new Jt,this.scene.add(this.track.group),this.car=new Qt({mass:1200,maxSpeed:40,acceleration:32,braking:60,handling:2.2,drag:.8,lateralGrip:8,reverseScale:.45,handbrakeGrip:.2,boost:{multiplier:1.35,capacity:6,drain:.45,regen:.22}}),this.car.setPosition(0,0,0),this.car.setHeading(0),this.scene.add(this.car.group),this.camera.position.set(0,8,15),this.camera.lookAt(0,0,0),this.chaseCamera.update(0,this.car.group),this.collision=new te(this.track.obstacles),this.score=new oe,this.effects=new ne(this.scene,this.camera),this.audio=new ee(this.camera),this.applySettingsToAudio();const s=_.subscribe(()=>this.applySettingsToAudio());this.unsubSettings=()=>s();const t=async()=>{var a;await((a=this.audio)==null?void 0:a.resume()),window.removeEventListener("keydown",t,!0),window.removeEventListener("pointerdown",t,!0),this.disposeBag=this.disposeBag.filter(h=>h!==i)},i=()=>{window.removeEventListener("keydown",t,!0),window.removeEventListener("pointerdown",t,!0)};window.addEventListener("keydown",t,!0),window.addEventListener("pointerdown",t,!0),this.disposeBag.push(i),this.lap=new ae([{position:new C(0,0,100),radius:5},{position:new C(0,0,200),radius:5},{position:new C(0,0,300),radius:5},{position:new C(0,0,400),radius:5}]),this.running=!0,this.clock.start(),this.loop()}update(e){var P,E,I,z;this.physics.update(e);const s=Number(this.input.isDown("ArrowUp")||this.input.isDown("KeyW")),t=Number(this.input.isDown("ArrowDown")||this.input.isDown("KeyS")),i=this.input.isDown("Space"),a=this.input.isDown("ShiftLeft")||this.input.isDown("ShiftRight"),h=J.clamp(this.input.getSteerValue()*this.steerSensitivity,-1,1);this.car.setInputs({throttle:s,brake:t,steering:h,handbrake:i,boost:a}),this.throttleInput=s,this.car.update(e),this.currentSpeed=this.car.getSpeed(),this.chaseCamera.update(e,this.car.group),this.track.update(this.car.group.position.z),(P=this.environment)==null||P.update(this.car.group.position.z),this.score.update(e,this.car.group.position,this.currentSpeed),this.effects.update(e),(this.input.isDown("ShiftLeft")||this.input.isDown("ShiftRight"))&&this.throttleInput>0&&this.effects.createBoostEffect(this.car.group.position);const l=this.car.group.position,p=.6,o=1.2,d={minX:l.x-p,maxX:l.x+p,minZ:l.z-o,maxZ:l.z+o},b=this.car.getVelocityRef().clone();if(this.collision.resolve(l,this.car.getVelocityRef(),d)){const $=this.car.getVelocityRef(),H=b.clone().sub($),L=J.clamp(H.length()*.1,0,1);(E=this.audio)==null||E.playCollision(L),this.score.subtractCollisionPenalty(),this.effects.createCollisionEffect(this.car.group.position,L)}const x=25;Math.abs(l.x)>x&&(l.x=J.clamp(l.x,-x,x)),this.input.isDown("KeyR")&&this.car.reset(new C(0,0,0),0),this.lap.update(performance.now(),this.car.group.position),(I=this.audio)==null||I.setEngine(this.throttleInput,this.currentSpeed,this.car.config.maxSpeed);const D=((z=this.getBoostLevel)==null?void 0:z.call(this))??0;this.chaseCamera.setBoostVisual(1-D<.001?0:this.throttleInput>0?1-D*.2:0)}render(){this.renderSystem.render()}destroy(){var e,s,t;this.running=!1,this.clock.stop(),this.disposeBag.forEach(i=>i()),(e=this.unsubSettings)==null||e.call(this),(s=this.environment)==null||s.dispose(this.scene),R.disposeScene(this.scene),this.renderer.dispose(),this.input.destroy(),(t=this.audio)==null||t.destroy(),this.renderer.domElement.parentElement===this.container&&this.container.removeChild(this.renderer.domElement)}getLapHud(){return this.lap.getHudTimes()}getBoostLevel(){var e;return(e=this.car)!=null&&e.getBoostLevel?this.car.getBoostLevel():0}getScore(){return this.score.getScoreData()}applySettingsToAudio(){var s,t;const e=Q(_);this.steerSensitivity=((s=e==null?void 0:e.controls)==null?void 0:s.sensitivity)??1,(t=this.audio)==null||t.updateFromSettings(e)}}var he=pt('<div class="combo svelte-4p1id7"> </div>'),de=pt('<div class="game-root svelte-4p1id7"></div> <!> <div class="hud svelte-4p1id7"><a class="home-btn svelte-4p1id7" aria-label="Home" title="Home" style="pointer-events:auto">Home</a> <div class="score-section svelte-4p1id7"><div class="score svelte-4p1id7"> </div> <div class="distance svelte-4p1id7"> </div> <!></div> <div class="speed svelte-4p1id7"> </div> <div class="laps svelte-4p1id7"><div> </div> <div> </div></div> <div class="help svelte-4p1id7">W/S or ↑/↓: Throttle/Brake • A/D or ←/→: Steer • Space: Handbrake • Shift: Boost • R: Reset</div> <button class="mute svelte-4p1id7" aria-label="Toggle mute" title="Toggle mute"> </button> <div class="boost svelte-4p1id7"><div class="bar svelte-4p1id7"><div class="fill svelte-4p1id7"></div></div></div> <div class="speed-indicator svelte-4p1id7"><div class="speed-bar svelte-4p1id7"><div class="speed-fill svelte-4p1id7"></div></div> <div class="speed-text svelte-4p1id7"> </div></div></div>',1);function xe(f,e){Dt(e,!1);let s=k(null),t=null,i=k(0),a=k(0),h=k(null),u=k(!1),l=.8,p=k(1),o=k(0),d=k(0),b=k(0);Ct(()=>{if(!m(s))return;t=new ce(m(s)),t.init();const n=setInterval(()=>{var c;if(t){y(i,Math.round(t.currentSpeed*3.6));const M=(c=t.getLapHud)==null?void 0:c.call(t);if(M&&(y(a,M.current),y(h,M.best??null)),t.getBoostLevel&&y(p,t.getBoostLevel()),t.getScore){const A=t.getScore();y(o,A.total),y(d,Math.round(A.distance)),y(b,A.combo)}}},100);return()=>{clearInterval(n),t==null||t.destroy()}}),At(()=>{t==null||t.destroy(),t=null});function S(){const n=Q(_);n.audio.master>0?(l=n.audio.master,_.update(c=>({...c,audio:{...c.audio,master:0}})),y(u,!0)):(_.update(c=>({...c,audio:{...c.audio,master:l||.8}})),y(u,!1))}function x(n){const c=Math.floor(n/6e4),M=Math.floor(n%6e4/1e3),A=Math.floor(n%1e3/10);return`${c}:${String(M).padStart(2,"0")}.${String(A).padStart(2,"0")}`}function D(n){return n<=20?"#00ff00":n<=40?"#7fff00":n<=60?"#ffff00":n<=80?"#ff7f00":n<=120?"#ff4500":n<=160?"#ff0000":"#ff00ff"}function P(n){var c;(c=t==null?void 0:t.input)==null||c.setMobileThrottle(n)}function E(n){var c;(c=t==null?void 0:t.input)==null||c.setMobileBrake(n)}function I(n){var c;(c=t==null?void 0:t.input)==null||c.setMobileSteer(n)}function z(n){var c;(c=t==null?void 0:t.input)==null||c.setMobileHandbrake(n)}function $(n){var c;(c=t==null?void 0:t.input)==null||c.setMobileBoost(n)}var H={formatMs:x};Ht();var L=de(),tt=Pt(L);Rt(tt,n=>y(s,n),()=>m(s));var et=g(tt,2);se(et,{onThrottle:P,onBrake:E,onSteer:I,onHandbrake:z,onBoost:$});var st=g(et,2),it=v(st),F=g(it,2),V=v(F),ut=v(V);w(V);var W=g(V,2),mt=v(W);w(W);var ft=g(W,2);{var vt=n=>{var c=he(),M=v(c);w(c),ct(()=>T(M,`Combo: x${m(b)??""}`)),ht(n,c)};zt(ft,n=>{m(b)>1&&n(vt)})}w(F);var O=g(F,2),wt=v(O);w(O);var X=g(O,2),j=v(X),bt=v(j);w(j);var rt=g(j,2),St=v(rt);w(rt),w(X);var G=g(X,4),gt=v(G,!0);w(G);var U=g(G,2),at=v(U),yt=v(at);w(at),w(U);var ot=g(U,2),Z=v(ot),Mt=v(Z);w(Z);var nt=g(Z,2),kt=v(nt);return w(nt),w(ot),w(st),ct((n,c,M,A,Bt)=>{Gt(it,"href",`${ie}/`),T(ut,`Score: ${n??""}`),T(mt,`Distance: ${m(d)??""}m`),T(wt,`${m(i)??""} km/h`),T(bt,`Lap: ${c??""}`),T(St,`Best: ${M??""}`),T(gt,m(u)?"Unmute":"Mute"),dt(yt,A),dt(Mt,Bt),T(kt,`${m(i)??""} km/h`)},[()=>m(o).toLocaleString(),()=>x(m(a)),()=>m(h)===null?"--":x(m(h)),()=>`width:${Math.round(m(p)*100)}%`,()=>`width:${Math.min(m(i)/200*100,100)}%; background: ${D(m(i))}`]),Et("click",G,$t(S)),ht(f,L),re(e,"formatMs",x),It(H)}export{xe as component};
